[Error]
enum SdkError {
  "GreenlightApi",
  "InvalidArgument",
  //"Other",
};

dictionary GreenlightCredentials {
  string device_key;
  string device_cert;
};

dictionary GetInfoResponse {
  string pubkey;
  string alias;
  string color;
  string network;
  u32 block_height;
};

dictionary MakeInvoiceRequest {
  u64 amount_msat;
  string description;
  string label;
};

dictionary MakeInvoiceResponse {
  string bolt11;
};

dictionary PayRequest {
  string bolt11;
};

dictionary PayResponse {
  string preimage;
};

dictionary KeySendRequest {
  string destination;
  u64? amount_msat;
  string? label;
};

dictionary KeySendResponse {
  string payment_preimage;
};

dictionary ListFundsRequest {
  boolean? spent;
};

dictionary ListFundsOutput {
  string txid;
  u32 output;
  u64? amount_msat;
  string scriptpubkey;
  string? address;
  string? redeemscript;
  i32 status;
  boolean reserved;
  u32? blockheight;
};

dictionary ListFundsChannel {
  string peer_id;
  u64? our_amount_msat;
  u64? amount_msat;
  string funding_txid;
  u32 funding_output;
  boolean connected;
  i32 state;
  string? channel_id;
  string? short_channel_id;
};

dictionary ListFundsResponse {
  sequence<ListFundsOutput> outputs;
  sequence<ListFundsChannel> channels;
};

dictionary ConnectPeerRequest {
  string id;
  string? host;
  u16? port;
};

dictionary ConnectPeerResponse {
  string id;
};

dictionary FundChannelRequest {
  string id;
  u64? amount_msat;
  boolean? announce;
  u32? minconf;
};

dictionary FundChannelResponse {
  string txid;
};

interface BlockingGreenlightAlbyClient {
  [Throws=SdkError]
  GetInfoResponse get_info();

  [Throws=SdkError]
  MakeInvoiceResponse make_invoice(MakeInvoiceRequest request);

  [Throws=SdkError]
  PayResponse pay(PayRequest request);

  [Throws=SdkError]
  KeySendResponse key_send(KeySendRequest request);

  [Throws=SdkError]
  ListFundsResponse list_funds(ListFundsRequest request);

  [Throws=SdkError]
  ConnectPeerResponse connect_peer(ConnectPeerRequest request);

  [Throws=SdkError]
  FundChannelResponse fund_channel(FundChannelRequest request);
};

namespace glalby {
  [Throws=SdkError]
  BlockingGreenlightAlbyClient new_blocking_greenlight_alby_client(string mnemonic, GreenlightCredentials credentials);

  [Throws=SdkError]
  GreenlightCredentials recover(string mnemonic);
};
